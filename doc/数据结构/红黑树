BST 二叉查找树
左子节点比父节点小，右节点值比父节点大。
理想情况下，时间复杂度为O(logN),最大为O(N),当高度为logN+1时，是平衡的

BST的问题:
数据插入的时候会导致树倾斜

RBTree
平衡树在插入和删除的时候，会通过旋转操作将高度保持在logN
AVL树和红黑树,AVL树由于实现比较复杂，而且插入和删除性能差，在实际环境下的应用不如红黑树。

RBTree的定义:
任何一个节点都有颜色，黑色或者红色
根节点是黑色的
父子节点之间不能出现两个连续的红节点
任何一个节点向下遍历到其子孙的叶子节点，所经过的黑节点个数必须相等
空节点被认为是黑色的
