垂直且分
水平且分
切分策略：
1.查询切分
将ID和库的mapping关系记录在一个单独的库中／
2.范围切分
3.Hash切分
一致性哈希
唯一ID方案
1.利用数据库自增ID,单点风险，单机性能瓶颈
2.利用数据库集群并设置相应步长(Flickr)
优点：高可用、ID较简洁。
缺点：需要单独的数据库集群。
3.twitter snowflake
优点：高性能高可用、易拓展。
缺点：需要独立的集群以及ZK。
4.GUID,Random算法
问题：
垂直切分后，无法适用join
水平切分后，查询条件一定切分的维度内，禁止不带切分维度的查询

数据迁移
阶段一:
1.数据库双写，事务成功以老模型为准，查询走老模型
2.每日job数据队长
3.通过job导入历史数据
阶段二：
1.历史数据导入完毕且数据对帐无误
2.依然是数据库双写，但是事务成功与否以新模型为准，在线查询切换新模型
3.每日job对帐
阶段三:
1.老模型不再同步写入，仅在订单有终态时会异步补上
2.待依赖全都解决后停止老模型的适用

flickr:
mysql创建一个专门生成uid的表，可以建立多张，部署在一个集群的多台服务器上，设置步长
snowflake:



