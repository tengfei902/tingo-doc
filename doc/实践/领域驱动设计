2.语言的交流和使用
2.1模式：UBIQUITOUS LANGUAGE
要想创建一种灵活的，蕴含丰富知识的设计，需要一种通用的，共享的团队语言，这种语言应该随时进行检验的.
将模型作为语言的中心，确保团队在所有交流活动和代码中坚持使用这种语言。在画图， 写东西中使用这种语言。
2.3 一个团队，一种语言
2.4 文档和图
uml的缺点：对象模型图在某些方面过于细致，同时在某些方面又有很多遗漏。
uml图无法传达模型的两个最重要的方面，一个是模型所表示的概念的意义，另一个是对象应该做哪些事情。
设计的重要细节应该在代码中体现出来。
2.4.1 书面设计文档
文档作为代码和口头交流的补充。
极限编程主要关注程序的活动元素以及可执行的测试。但代码作为一种文档，可能使读代码的人淹没在细节中。仅仅使用代码的文档方式和
过度使用UML图具有同样的基本问题。
文档不应再重复表示代码已经明确表达的内容，代码已包含细节，文档不应该再把细节描述出来。
文档应努力需求生存之道并保持最新。
设计文档最大的价值是解释模型的概念，帮助在代码的细节中指引方向。
2.4.2 完全依赖🉑可执行代码的情况

2.5 解释性模型

3.绑定模型和实现
领域驱动设计要求模型不仅能够指导早期的分析工作，还应该成为设计的基础。这种设计的方法对于代码的编写有着重要的暗示作用。
3.1 MODEL-DRIVEN DESIGN
严格按照基础模型来编写代码，能够使代码更好的表达含义，并且使模型更复合设计。
那些没有使用领域模型的项目，仅仅通过编写代码实现一个一个的功能，它们无法利用知识消化和沟通带来的好处。如果涉及复杂的领域就会使项目
举步维艰。
另一方面，许多复杂的项目却是确实在尝试使用一些领域模型，但是并没有把代码的编写与模型紧密联系起来。这些项目所设计的模型，在项目初期
还可能用来做一些探索工作，但是随着项目的进展，这些模型与项目渐行渐远，设置还会起到误导的作用。所有在模型上花费的精力都无法保证程序的正确性。
模型和程序设计的联系可能在很多情况下被破坏，但是二者的这种分离往往是有意而为之。
很多设计方法提倡使用完全脱离于程序设计的分析模型，二者由不同的开发人员开发。分析模型是对业务领域进行分析的结果，它在组织业务领域的概念时，
完全不考虑自己在软件系统中将会起到的作用。在创建分析模型时并没有考虑程序设计的问题，因此分析模型有可能无法满足程序设计的需要。
如果整个程序设计或者其核心部分没有与领域模型相对应，那么这个模型就是没有价值的。软件的正确性也值得怀疑。同时模型和设计功能之间太过