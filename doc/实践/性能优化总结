常见性能优化策略分类:
1.代码
找出相应的瓶颈，再来考虑具体的优化策略.
for循环次数过多
无谓的条件判断
相同逻辑重复多次
重复远程调用
无效数据查询
2.数据库
a.SQL调优
b.架构层面的调优
包括读写分离,多从库负载均衡,水平和垂直分库分表
c.连接池调优
3.缓存
分类:
本地缓存(HashMap/ConcurrentHashMap,Ehcache,Guava cache)
缓存服务(Redis/Tair/memcache)
使用场景:
短时间内相同数据重复查询多次且数据更新不频繁，这个时候可以选择先从缓存查询，查询不到再从数据库加载并回设到缓存的方式。此种场景较适合用单机缓存。
高并发查询热点数据，后端数据库不堪重负，可以用缓存来扛
选型考虑:

设计关键点:
何时更新缓存,如何保障更新的可靠性h和实时性

