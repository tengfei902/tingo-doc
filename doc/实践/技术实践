1.事务控制
事务应保持尽量小，事物中尽量避免不可控调用，如IO,远程调用等
事务中尽可能避免存储过程操作，存储过程存在不可控性
事务中避免大数据量业务操作，大数据量事务操作应实现业务隔离，保证多jvm之间数据同步通信
2.技术选型
技术选型应偏向与可靠性，实用性，可维护性。首先团队内较熟悉的技术方案，业内使用率较高，有运维经验。
当有技术实力时，应尽量本地化，对于业内的框架及技术方案，实施本地化定制，首先减少对于其他环境的依赖，另外可以去除不需要的冗余功能，
另外对于定制化的技术选型，自身团队可以完全控制这中间可能出现的技术风险。
3.分布式系统实用规则
rpc与http
rpc与http都用来实现分布式系统之间的相互效用，两者之间性能rpc略高。但对于分布式调用，性能并非重要选项，因为两者性能都比较高。
http方式对于开发者和测试人员来说比较直观，易于测试。存在问题是多客户端与服务端之间的集群设置由反向代理实现，如果需要得到这
中间节点的运行状态，或当前服务压力比较困难。对于rpc方式，当前有成熟解决方案。

分布式系统之间调用关系
多系统之间的调用关系应简单，不应存在循环调用

灰度系统方案
两种场景:
1.生产数据，灰度验证，灰度应用发布后，在灰度环境验证数据及逻辑的正确性，数据仍然是生产数据，所以数据最终仍会由真实用户消费
2.测试数据，灰度测试。数据不能被真实消费者消费，由于灰度数据保存在生产数据库，无法做到物理隔离，只能做到逻辑隔离，暂没有合适方案可以实现
方案1的问题，JOB的不可测试性。JOB无法确定需要执行的目标数据，且job执行在灰度与生产环境之间存在数据交集，会重复执行。
对此，解决方案：
1.Job部署两个环境，生产和灰度不同时启动，需要灰度时启动灰度，关闭生产，此方案缺点：依赖于人工操作，存在不可靠风险。数据无法指定
2.Job驱动修改为消息驱动，消息存在可测试性，消息可以指定接收方，并指定执行数据，可以满足灰度测试需求。问题:改动点比较多，一方面要
考虑接收方的处理能力，改批量处理为单条处理，如果修改为队列接收执行，需考略消息的可靠性，另外在架构设计的初期就需要设计类似的替代方案。
总体可行性比较高
3.提供指定数据的job执行方式，正常job在生产环境处理，测试数据手工在灰度环境处理，同样依赖与人工操作，存在风险。另外此方案依赖于
job的实现方式

分布式系统之间的耦合关系
系统之间的耦合应该越小越好，业务上的rpc调用应尽量改由消息驱动；非业务调用，如果多个系统依赖于同一个系统，应该修改设计为每个系统
冗余相同的功能，以避免架构的复杂性以及系统的单点风险。