Thrift是Facebook开源提供的一个高性能，轻量级RPC服务框架，其产生正是为了满足当前大数据量、分布式、跨语言、跨平台数据通讯的需求。
但是，Thrift并不仅仅是序列化协议，而是一个RPC框架。
对比JSON和XML:
thrift空间开销和性能上有了比较大的提升。
由于thrift序列化被嵌入到thrift框架中，thrift框架本身并没有透出序列化与反序列化接口，导致很难与其他传输层共同使用

适用场景：
高性能，分布式的RPC服务
非适用场景:
由于其Server是基于自身的Socket服务，所以在跨防火墙访问时，安全是一个顾虑
Thrift序列化之后的数据是Binary数组，不具有可读性，调试代码时相对困难
由于Thrift的序列化和框架紧耦合，无法支持向持久层直接读写数据，所以不适合做数据持久化序列化协议

架构:
CS模式
underlying IO -> transport -> tprotocol -> code

数据传输格式,数据传输方式,服务模型
1.数据的传输格式(protocol):
    二进制格式:TBinaryProtocol
    压缩格式:TCompactProtocol
    JSON格式:TJSON
    TSimpleJSON
    TDebugProtocol
2.支持的数据传输方式(transport):
    TSocket 阻塞式socket
    TFramedTransport – 以frame为单位进行传输，非阻塞式服务中使用。
    TFileTransport – 以文件形式进行传输。
    TMemoryTransport – 将内存用于I/O. java实现时内部实际使用了简单的ByteArrayOutputStream。
    TZlibTransport – 使用zlib进行压缩， 与其他传输方式联合使用。当前无java实现。
3.支持的服务模型
    TSimpleServer – 简单的单线程服务模型，常用于测试
    TThreadPoolServer – 多线程服务模型，使用标准的阻塞式IO。
    TNonblockingServer – 多线程服务模型，使用非阻塞式IO（需使用TFramedTransport数据传输方式）

x`