性能指标:
1.吞吐量
2.延迟
3.并发量
4.并发数达到最大时的延迟
5.最差情况下延迟
6.垃圾收集频率

性能分析方法
1.自顶向下
从顶层应用的使用情况寻找优化的机会和问题.
2.自下向上
从最底层的CPU统计数据开始逐渐向上.
在不更改应用的前提下改善CPU的使用率.
工具:oracle solaris studio performance analyzer
intel vtune
amd codeAnalyst performance analyzer

操作系统性能监控:
1.CPU使用率监控:
CPU使用率分为用户态CPU使用率和系统态CPU使用率,系统态CPU使用率高说明共享资源有竞争或IO设备之间有大量交互.
应尽可能降低系统态CPU使用率.
每时钟指令数:instructions per clock
每指令时钟周期:cycles per instruction

2.CPU调度程序运行队列
在很长一段时间里,如果队列的长度一直超过虚拟处理器个数的1倍,需要关注,只是暂时不需要采取行动.
如果达到虚拟处理器个数的3至4倍,需立即采取行动.

3.内存使用率
页面交换使用swap空间;JVM垃圾收集
监控锁竞争:

4.网络IO使用率
5.磁盘IO使用率

JVM:
64位JVM性能损失:hotspot VM内部java对象表示(普通对象指针)的长度从32位变成了64位,导致CPU高速缓存行中可用的oops变少,从而降低了缓存的效率.
解决方法:使用压缩指针 -XX:UseCompressedOops

JVM基本架构:垃圾收集器(Serial,Throughput,CMS,G1),JIT编译器(Server,Client),VM运行时

运行时:命令行选项解析,VM生命周期管理,类加载,字节码解释,异常处理,同步,线程管理,java本地接口,VM致命错误处理,C++堆管理
1.命令行选项:包括标准选项,非标准选项(-X),非稳定选项(-XX)
2.VM生命周期:
3.VM类加载
    VM负责解析常量池符号,需要加载,链接,然后初始化java类和java接口.
    1.类加载阶段:给定类或接口,类加载时会依据它的名字找到java类的二进制文件,定义java类,创建class对象.类加载会对类的格式进行语法检查.
    类加载前需加载超类.
    链接第一步为验证,j检查类的定义,常量池及符号,第二部创建静态字段,初始化为默认值.第三部解析符号引用.然后初始化类.
    首次使用类时进行类初始化
    2.类加载器委派:启动类加载器,扩展,系统
    3.启动类加载器
    4.类型安全
    5.HotSpot类元数据
    6.内部的类加载数据
4.字节码验证:链接时进行字节码验证以保障类型安全.
5.类数据共享
6.解释器:基于模板的解释器
7.异常处理:异常导致程序控制的非局部转移,从异常发生或直接抛出的地方,转到程序员指定或异常被捕获的地方.
8.同步:java的monitor对象可以锁定或者解锁,任何时刻只能有一个线程拥有monitor对象.
9.线程管理:java线程被一对一映射为本地操作系统线程.
10.C++堆管理:
11.java本地接口
12.致命错误处理

垃圾收集器:
1.分代垃圾收集
    大多数分配对象的存活时间很短
    存活时间久的对象很少引用存活时间短的对象
    分区:
    新生代:空间比较小且收集频繁,minor GC
    老年代:新生代中长期存在的对象被提升到老年代. full GC , 执行频率低,执行时间长
    永久代

2.新生代:Eden,Survivor;Minor GC后Eden几乎是空的;Survivor只有一块持有对象,另一块基本是空的;
    Minor GC后两个Survivor交换角色,Eden为空,仍然只使用一个Survivor,因为收集过程中复制存活对象,所以这种垃圾收集器被称为复制垃圾收集器
3.快速内存分配:
    分配器在重用堆空间之前需要找到可以满足其分配需求的空闲空间.垃圾收集器以复制方式回收新生代,在eden中运用被称为指针碰撞的技术分配空间;
    追踪最后一个分配的对象,当有新的分配请求时,分配器只需检查top和Eden末端之间的k空间是否能容纳.
    多线程分配:线程本地分配缓冲区 TLAB,为每个线程设置缓冲区以此改善多线程分配的吞吐量;当线程的TLAB填满需要获取新的空间时,需要采用线程安全的
    方式;
4.垃圾收集器
    1.Serial
        新生代使用复制垃圾收集算法,老年代使用滑动压缩标记清除算法(标记压缩垃圾收集器),minor GC和Full GC都是Stop the world方式;
        标记压缩垃圾收集器首先找出老年代中有哪些仍然存活的对象,然后将他们滑向堆的头部,从而把所有空闲空间留在堆的尾部.这使得将来任何在
        老年代中的分配操作都可以使用快速的指针碰撞技术.
        当JVM进行垃圾收集时,只使用一个处理器,因此对其他JVM影响比较小;
    2.Parallel
        minor GC采用stop the world方式,老年代采用标记压缩方式,都并行处理.
    3.CMS
        并发标记清除收集器,管理新生代方式与serial和parallel相同,老年代则尽可能并发执行.每个垃圾收集周期仅2次短的停顿;
        1.初始标记:标记从外部(GC Root)直接可达的老年代对象;
        2.并发标记:标记从这些对象可达的存活对象;
        3.并发预清除
        重新遍历在并发标记期间因为并发而被改掉的对象,可以减少重新标记时需要遍历的对象;
        4.重新标记
        因为在标记期间应用可能正在运行并更新引用,所以到并发标记阶段结束时,未必所有存活对象都已标记,为了应对这种情况,应用需要再次停顿,称为
        重新标记,重新遍历在并发标记期间有变化的对象并再次标记;
        追踪更改对象可以重用数据结构卡表.
        5.并发清除
        清除java堆,释放没有标记的对象.
        清除后堆空间不连续,垃圾收集器需要一个数据结构记录哪部分空间空闲,空闲列表不如指针碰撞高效,因此老年代的分配更加昂贵.使minorGC有
        额外的开销,因为minor GC中会有对象提升,会在老年代造成大量分配.
        CMS需要更大的堆. CMS周期长于stop the world时间.同时只有在清除阶段空间才会真的回收.
        缺乏压缩会导致碎片化,导致垃圾收集器无法最大程度利用空闲空间.在回收周期中,如果尚未回收到足够多空间之前,老年代满了,CMS会使用
        stop the world进行空间压缩.

        与parallel相比,CMS老年代停顿变短了,但新生代停顿略微拉长,吞吐量降低,堆的大小增长,b并且由于并发,垃圾收集会占用CPU周期.
    4.G1
        并行并发和增量式压缩低停顿垃圾收集器.
        G1将堆分成相同尺寸的块(Region).虽然G1也是分代,但是整体上没有划分新生代和老年代.
        G1将区域中的存活对象转移到另外一些区域,然后收集前者.大部分时候只收集新生区域,x相当于minorGC.
        G1定期执行b并发标记,标识空或几乎为空的非新生区域.

    垃圾收集器对比


JVM性能监控

java性能分析
工具:
Oracle solaris studio performance analyzer
NetBeans profiler

volatile
字段值在所有线程和CPU缓存中保持同步.
存放在CPU缓存中的volatile字段值被一个变成修改后,存有该volatile变量原始值在其他cpu缓存中的线程,在线程读取本地CPU缓存中volatile
字段之前必须对其更新,否则就会强制从内存中读取更新过的volatile值.
为确保CPU缓存及时更新,出现volatile的地方都会加入一条CPU指令,内存屏障(membar或fence)

对于一个拥有多CPU缓存,性能要求很高的应用程序,频繁更新volatile字段可能导致性能问题.


垃圾收集调优
性能属性:吞吐量,延迟,内存占用

原则:
1.每次minor GC尽可能多的收集
2.处理吞吐量和延迟问题时,java堆越大,收集效果也越好,GC内存最大化原则
3.吞吐量,延迟,n内存占用 3选2优化

避免因内存碎片引起的stop the world:
1.为GC申请最大内存原则:让老年代空间大到足够避免由堆碎片引起的stop the world 压缩
2.Minor GC回收原则:减少对象从新生代被提升到老年代的比率.

Survivor:
新生代空间包含一个eden和2个survivor.
2个survivor分别被标记为from和to.当eden空间满的时候会触发minor GC,活跃对象会从eden空间复制到to,同时survivor存活对象会被复制到
to,minor完成后,eden和from被清空.之后survivor切换标记.
如果minor GC时,to不足以容纳所有存活对象,超出部分会提升到老年代.

调优并行垃圾收集线程

1.调优延迟/响应性
    优化java堆大小的配置
    评估GC的持续时间和频率
    是否可以切换到不同的垃圾收集器
    发生垃圾收集器切换之后进一步的内存调优

    调优可能出现的结果:
    1.应用程序的延迟性达到要求:后续调优,吞吐量调优
    2.应用程序的延迟性达不到要求:定义初始java堆大小,观察垃圾收集器对延迟性的影响.
    评估垃圾收集器对延迟性影响的过程中进行以下活动:
    1.测量minor GC持续时间
    2.统计minor GC的次数
    3.测量full GC最长持续时间
    4.统计最差情况下Full GC频率

    1.输入
        应用程序可接受的平均停滞时间
        可以接受的minor GC频率
        应用程序最大停顿时间
        最大停顿发生的频率
    2.优化新生代大小
        根据垃圾收集的统计数据,minor GC持续时间和频率可以确定新生代空间的大小.
        调整新生代空间时的几个准则:
        1.老年代空间大小不应该小于活跃数据的1.5倍
        2.新生代空间应至少为java堆的10%
        3.增大java堆大小时应
    3.优化老年代空间大小
        评估Full GC引入的最差停滞时间以及full GC的频率
    4.为CMS调优延迟
       使用CMS收集器时,老年代垃圾收集线程可以与应用程序线程实现最大的并行度.CMS并不进行压缩,主要通过避免老年代空间发生stop the world
       压缩式垃圾收集实现的.
    5.survivor空间
    6.晋升阈值
        0-31
        设置为0时,会造成刚刚分配的对象在紧接着的monor GC 中直接从新生代提升到老年代,同时造成老年代的迅速增长,引起频繁的Full GC
        如果阈值设置过高,会造成对象长期存在survivor空间中,知道最后溢出,一旦发生溢出,对象将被全部提升到老年代.会造成短期存在的对象
        也被提升到了老年代.
    7.调整晋升阈值
        -XX:+PrintTenuringDistribution
        监控晋升的分布或者对象年龄分布
    8.调整survivor空间容量
    9.显式的垃圾收集
    10.并发永久代垃圾收集
    11.调优CMS停顿时间
        CMS周期中有两个阶段是stop-the-world的阶段,处于这两个阶段的应用程序会被阻塞.
        初始标记阶段和重新标记阶段
        初始标记阶段是单线程,重新标记阶段为多线程.

2.应用程序吞吐量调优
    应用程序的吞吐量要求;可用于部署java程序的内存使用量.
    1.CMS吞吐量调优:
    2.throughput收集器调优
        避免发生full GC
        throughput收集器默认启动一个称为自适应大小调整的特性.自适应大小调整根据对象分配以及存活率自动对新生代的Eden和survivor空间进行
        调整以最优化对象老化频率.
    3.Survivor空间调优
        调整survivor空间大小的目标是在短期存活对象被提升到老年代空间之前,尽可能长时间的保持这些对象.
    4.调优并行垃圾收集线程
    5.在Numa上
    -XX:+UseNuma
    根据CPU与内存位置的关系在分配线程运行的本地内存中分配对象.

3.其他性能命令行选项
    1.实验性优化:
    -XX:+AggressiveOpts
    2.逃逸分析:


java应用的基准测试

        






