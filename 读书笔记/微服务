领域驱动设计
持续交付理论
六边形架构理论
微服务于SOA的异同
编排与协同调用方式
RPC调用(SOAP,thrift,proctocol buffers)
spring boot
Rest实战
ATOM
消费者竞争模式
灾难性故障转移
aws
BFF 为前端服务的后端
PaaS 平台即服务

1.微服务
什么是微服务？
随着领域驱动设计，持续交付，按需虚拟化，基础设施自动化，小型自治团队，大型集群系统这些实践的流行，微服务也应运而生，
它不是被发明出来的，而是从现实世界中总结出来的一种趋势和模式。

微服务是一些小而自治的服务。
1.很小，专注于做好一件事。在单块系统中，系统通过模块和分层，实现系统功能的内聚性(单一指责原则)。
微服务把这个理念应用在单独的服务上，根据业务的边界来确定服务的边界。
微服务的大小限制：与团队结构匹配。服务越小，微服务的优点和缺点越明显。越小独立性带来的好处越多，但是管理大量服务也会越复杂。
2.自治性。
每个服务是一个单独的实体，可以运行在PAAS上，或者作为一个单独的服务器进程。
服务之间通过网络通信，实现解耦。
服务之间可以单独部署，并且不会互相影响。
服务之间通过接口互相调用，接口暴露应该是粗粒度的，避免出现贫血服务，因为会导致系统之间的耦合；系统之间的接口应选用技术无关的实现。

微服务有哪些好处？
1.技术异构性
对于单块系统而言，尝试新技术通常伴随着很大的风险，对于微服务而言，总会有一些地方让我们尝试新技术。
2.弹性
舱壁：如果服务不可用了，但并没有导致级联故障，那么系统的其他部分还是可以正常使用的。服务边界就是舱壁。
微服务可以处理服务不可用和功能降级问题。
3.扩展
单块服务只能对系统整体进行横向扩展，微服务可以针对单个服务横向扩展。
4.简化部署
单块系统中，由于代码库的巨大，每更新一行代码都需要大量的回归测试，因为不知道会影响到哪些功能。
在微服务中，每个服务是独立部署的，代码库也是隔离的。
5.与组织结构匹配
在小型代码库上工作的小型团队更高效。
6.可组合性
厚平台薄应用，不同用户可以以不同方式调用相同的服务，实现相同的功能，而不是之前单块应用，同时只对应一种类型的用户。
7.对可替代性的优化
小型的代码库更易于优化和重构

什么是SOA?
SOA(面向服务的架构）是一种设计方法，其中包含多个服务，而服务与服务之间通过配合最终会提供一系列功能。一个服务通常以独立的形式存在
于操作系统进程中。服务之间通过网络调用，而非采用进程内调用的方式通信。

SOA与微服务的区别是什么？
现有的SOA知识并不能帮助你把很大的应用程序划小，它没有提到多大算大，也没有讨论如何在现实世界中有效的防止服务之间的过度耦合，由于
我们对项目的系统和架构有着更好的理解，所以能更好的实施SOA,而这事实上就是微服务架构，可以认为微服务是SOA的一种特定方法。
SOA和微服务的目的都是拆分应用，实现敏捷开发和部署，实现高内聚，低耦合。
SOA更适合大型企业中的业务过程编排，应用集成。微服务去ESB,去中心化，分布式，而SOA以ESB为核心，大量的WS标准实现.
再次，服务粒度上，微服务更倡导服务的细粒度，重用性。
部署方式上，微服务不依赖服务器和数据模型。SOA通过展现层打包wars,业务层划分到jars，最终部署为EAR。

什么是模块分解技术？
OSGI

2.演进式架构
架构师的指责有哪些？
确定团队的一个共同的愿景

什么是分区？
服务边界，或者是一些粗粒度的服务群组，作为架构师，不应该关注每个区域内发生的事情，而应该多关注区域之间的事情。

一个原则性的方法。
1.战略目标
2.原则
为了和更大的目标保持一致，我们会制定一些具体的规则，并称之为原则，
3.实践
通过相应的实践来保证y原则能够得到实施。这些实践能够指导我们如何完成人物
4.将原则和实践相结合

5.要求的标准
6.代码治理
7.技术债务
8.例外管理
9.集中治理和领导
10.建设团队


3.如何建模服务

4.集成

5.分解单块系统

6.部署

7.测试

8.监控

9.安全

10.康威定律和系统设计

11.规模化微服务
