
LAMP
易趣被eBay收购之后，系统更换成了全球通用的 版本，响应用户的一个需求需要层层审批，据说，买个办公桌都 要走两个月流程，反应速度自然慢了下来

好的架构是进化来的，不是设计来的


看起来没有章法可循，其实都是围绕着提高容量、提高性能、节约成本来做的，由于这些是不算大的版本变迁

创造技术
因为很多架构的演化并没有明显的时间点，它是逐步进化而来的

坚若磐石 这个版本终于稳定下来了

第一，商用存储系统没有对小文件存储和读取的环境进行有针对性的优化；
第二，文件数量大，网络存储设备无法支撑；
第三，整个系统所连接的服务器越来越多，网络连接数已经达到网络存储设备的极限；
第四，商用存储系统扩容成本高，10TB的存储容量需要几百万元，而且存在单点故障，容灾和安全性无法得到很好的保证

第一，商用软件很难满足大规模系统的应用需求，无论是存储、CDN还是负载均衡，在厂商实验室端，都很难实现如此大的
数据规模测试。
第二，在研发过程中，将开源和自主开发相结合，会有更好的可控性，若系统出了问题，完全可以从底层解决问题，系统扩
展性也更高。
第三， 在一定规模效应的基础上，研发的投入都是值得的。下图演示的是一个自主研发和购买商用系统的投入产出比，实际
上，图中交叉点的左边，购买商用系统都是更加实际和经济性更好的选择，只有在规模超过交叉点的情况下，自主研发才能收到
较好的经济效果。实际上，规模化达到如此程度的公司并不多不过淘宝网已经远远超过了交叉点

第四，自主研发的系统可在软件和硬件的多个层次之间不断优化

技术服务于业务
这个产品带给我们的是新技术（AJAX、prototype框架）的尝试，以及新技术对用户操作习惯的改变，一定要慎之又慎。

缓存技术

分布式时代
服务化

在系统发展的过程中，架构师的眼光至关重要，作为程序员，只要把功能实现即可，但作为架构师，要考虑系统的扩展性、重用性

虽然个别架构师具备了“代码洁癖”，但淘宝前台系统的业务量和代码量还是呈爆炸式的增长。业务方总在后面催，开发人员不够就继续招人，
招来的人根本看不懂原来的业务，只好摸索着在“合适的地方”加一些“合适的代码”，看看运行起来像那么回事后，就发布上线。在这样的恶性循环中，
系统越来越臃肿，业务的耦合性越来越高，开发的效率越来越低。

一切要以稳定为中心，所有影响系统稳定的因素都要解决掉


做一个日常修改，都必须对整个系统回归测试一遍；多个日常修改如果放在一个版本中，要是一个功能没有测试通过，整个系统都不能发布。我们把这个
叫做“火车模型”，即任何一个乘客没有上车，都不许发车。这样做最直接的后果就是火车一直晚点，新功能上线更慢了，我们能明显感觉到业务方的不满，
空闻的压力肯定非常大。

1.总体描述
2.架构的演进性
3.代码质量与需求的冲突
4.站在巨人的肩膀上
5.面对问题的态度

《淘宝技术这十年》这本书，向我们详细介绍了淘宝架构的演变过程，怎么从最初的LAMP发展到现在的业内楷模。
本书充分阐述了"好的架构是进化来的，不是设计来的"这个道理，让我们从中受益匪浅。
这句话指明了程序员常踏入的两个误区。
首先，当我们开始一个从无到有的项目时，首先要考虑怎样才能快速满足业务的需求，绝大多数人会在设计出原型后就满足于现有成果，而没有
考虑到架构的进化问题，架构的最初设计者对业务的了解要比其他人更深入，也更能发现其中的问题，应该在设计原型的过程中就考虑以后可能
会碰到的问题。
另一个误区，是对于技术的过度执着。新技术的目的是服务于业务的变化，当技术的复杂度远超过业务的需求时，这个技术也就没有了使用的必要。
过度设计通常会增加项目复杂度，影响项目进度，并且不利于未来的扩展，因为此时未来发展方向尚不明确，有可能与真实情况大相径庭。
淘宝的技术发展，最早由LAMP发展而来，之后经历了读写分离，java重构，IOE，分库分表，创造技术几个阶段，最终发展成为分布式可扩展高可用的
架构，正如书中所说，这看起来没有章法可循，其实都是围绕着提高容量、提高性能、节约成本来做的。
书中讲到，由于淘宝业务的爆炸式增长，业务总在后面催，开发人员不够就继续招人，招来的人根本看不懂原来的业务，只好摸索着在“合适的地方”
加一些“合适的代码”，看看运行起来像那么回事后，就发布上线。在这样的恶性循环中，系统越来越臃肿，业务的耦合性越来越高，开发的效率越来越低。
这可能也是我们正在面对的一个问题，之前的php系统已经变得臃肿。新平台采用微服务架构，业务之间相互隔离，但是也同样存在进度与质量冲突的
问题。
之前看过一句话，进度是质量之敌，质量是进度之友。这里质量应该不仅是bug少，还有代码规范的意思。大致意思是因进度损失质量是不可挽回的，
因质量损失进度是可以挽回的，因为代码质量高可以节省bug的修改反馈时间。
关于提高代码质量，可以根据项目大小组织团队内的code review,review的目的不仅仅是要找出bug，这也是一个知识分享的过程，其他人会对代码
提出建议，review人员可以从中获取业务和技术知识，被review人员也因为有人会review代码而不得不提高自己的代码质量。
书中介绍了一些阿里自研的中间件的技术，当前在麦子架构中，技术选型也多集中在业内的开源技术。我们的优势是站在巨人的肩膀上，业内已经有
很多优秀的解决方案供我们参考。在未来的发展中，随着技术和业务的发展，对框架和中间件会有越来越多的个性化需求，这就需要对这些中间件的熟悉
程度要有更高的需求。当我们选择一个现有的产品时，优点是可以避免重复造轮子，快速满足我们的需求；同时也带了一些副作用，如我们只是知道如何
用，而通常对内部实现的原理不是很熟悉，当业务的发展要求我们更近一步修改框架时，通常会带来很高的学习成本，所以是否应该衡量利弊，只摘取
产品中我们需要的一部分，以降低学习和维护成本。

书中每一章都在引用，"所有的进步都是不稳定的，一个问题解决了，我们不得不面对又一个新问题"。
马云在卸任演讲中说到的那句话：很多人讨厌变化，但是正因为我们把握住了所有的变化，我们才看到了未来。技术也如此，驱使我们从模仿，
到改造再到创新的就是变化。碰到问题的时候不应该得过且过，应该抱着刨根问底的态度找到根本原因，虽然问题可能不能马上解决，但是可以
驱使我们向正确的方向发展。





